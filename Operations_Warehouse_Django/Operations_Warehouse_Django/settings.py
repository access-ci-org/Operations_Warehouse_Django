"""
Django settings for Operations_Warehouse_Django project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

##### ACCESS-CI CUSTOMIZATIONS #####
import json
import os
import sys

if 'DJANGO_CONF' not in os.environ:
    print('Missing DJANGO_CONF environment variable')
    sys.exit(1)
try:
    with open(os.environ['DJANGO_CONF'], 'r') as file:
        conf=file.read()
    CONF = json.loads(conf)
except (ValueError, IOError) as e:
    print('Failed to load DJANGO_CONF={}'.format(os.environ['DJANGO_CONF']))
    raise

SETTINGS_MODE = CONF.get('SETTINGS_MODE', 'SERVER')
#####

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONF['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CONF['DEBUG']

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'allocations',
    'cider',
    'glue2',
    'resource_v3',
    'warehouse_state',
    'warehouse_tools',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Operations_Warehouse_Django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

WRITE_HOSTNAME = CONF.get('DB_HOSTNAME_WRITE', 'localhost')
READ_HOSTNAME = CONF.get('DB_HOSTNAME_READ', 'localhost')

DATABASES = {
    'default': {
        'USER': CONF['DJANGO_USER'],
        'PASSWORD': CONF['DJANGO_PASS'],
        'HOST': WRITE_HOSTNAME,
    },
    'default.read': {
        'USER': CONF['DJANGO_USER'],
        'PASSWORD': CONF['DJANGO_PASS'],
        'HOST': READ_HOSTNAME,
    }
}
for db in DATABASES:
    DATABASES[db]['NAME'] = 'warehouse2'
    DATABASES[db]['ENGINE'] = 'django.db.backends.postgresql'
    DATABASES[db]['PORT'] = '5432'
    DATABASES[db]['CONN_MAX_AGE'] = 600 # Persist DB connections
    DATABASES[db]['OPTIONS'] = {'options': '-c search_path=django,public'}

#DATABASE_ROUTERS = ['xsede_warehouse.router.ModelDatabaseRouter',]
#from xsede_warehouse.router import *

if CONF.get('ELASTIC_HOSTS'):
    import elasticsearch_dsl.connections
    from elasticsearch import Elasticsearch, RequestsHttpConnection
    ELASTICSEARCH_DSL = {
        'default': {
            'hosts': CONF.get('ELASTIC_HOSTS', None)
        },
    }
    ESCON = elasticsearch_dsl.connections.create_connection( \
        hosts = CONF['ELASTIC_HOSTS'], \
        connection_class = RequestsHttpConnection, \
        timeout = 10)
else:
    ESCON = None
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

#STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

##### ACCESS-CI CUSTOMIZATIONS #####
#
# Server mode API settings
#
if SETTINGS_MODE == 'SERVER':
    API_BASE = CONF.get('API_BASE', '')

    #ALLOWED_HOSTS = []
    ALLOWED_HOSTS = CONF['ALLOWED_HOSTS']

    INSTALLED_APPS += (
        'corsheaders',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rest_framework',
        'drf_spectacular',
        # For django-allauth
        'django.contrib.sites',
        'allauth',
        'allauth.account',
        'allauth.socialaccount',
        'allauth.socialaccount.providers.cilogon',
    )
    
    SITE_ID = 1
    
    # Provider specific settings
    SOCIALACCOUNT_PROVIDERS = {
        'cilogon': {
            # For each OAuth based provider, either add a ``SocialApp``
            # (``socialaccount`` app) containing the required client
            # credentials, or list them here:
            'APP': {
                'client_id': '123',
                'secret': '456',
                'key': ''
            }
        }
    }

#        'django.middleware.cache.UpdateCacheMiddleware',
#        'django.middleware.cache.FetchFromCacheMiddleware',
    MIDDLEWARE = (
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    )

    AUTHENTICATION_BACKENDS = [
        # Needed to login by username in Django admin, regardless of `allauth`
        'django.contrib.auth.backends.ModelBackend',

        # `allauth` specific authentication methods, such as login by e-mail
        'allauth.account.auth_backends.AuthenticationBackend',
    ]
    
# Switched to True on 09-03-2020 by JP, making whitelist no longer relevant
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ORIGIN_WHITELIST = (
        'https://access-ci.org',
        'https://allocations.access-ci.org',
        'https://support.access-ci.org',
        'https://operations.access-ci.org',
        'https://metrics.access-ci.org',
    )
    CORS_ALLOW_METHODS = (
        'GET'
    )
    CSRF_TRUSTED_ORIGINS = (
        'https://*.access-ci.org',
    )

    SPECTACULAR_SETTINGS = {
        'TITLE': 'ACCESS Operations Information Services API',
        'DESCRIPTION': 'ACCESS Operations (CONECT) Information Sharing Platform - Service Facing API',
        'VERSION': '1.0.0',
        'PREPROCESSING_HOOKS': ['warehouse_tools.hooks.remove_internal_apis'],
    }
    
    ROOT_URLCONF = 'Operations_Warehouse_Django.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [ os.path.normpath(os.path.join(os.path.dirname(__file__), '../templates'))],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'Operations_Warehouse_Django.wsgi.application'

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Caching Configuration
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'my-cache',
        },
        'server': {
            'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
            'LOCATION': 'unix:/var/run/memcached/memcached.sock',
        }
    }
    
    # If configured CACHE_SERVER as True
    if CONF.get('CACHE_SERVER', False):
        CACHE_SERVER = 'server'
    else:
        CACHE_SERVER = 'default'
        
    # Static files (CSS, JavaScript, Images)

    STATIC_URL = API_BASE . '/static/'

    STATIC_ROOT = CONF.get('STATIC_ROOT', None)

    STATICFILES_DIRS = (
        os.path.join( os.path.dirname(__file__),  '../static' ),
    )

    #
    REST_FRAMEWORK = {
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        ],
        'DEFAULT_RENDERER_CLASSES': [
           'rest_framework.renderers.JSONRenderer',
           'rest_framework.renderers.StaticHTMLRenderer',
           'rest_framework.renderers.BrowsableAPIRenderer',
#           'rest_framework_xml.renderers.XMLRenderer',
        ],
        'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
        'PAGINATE_BY': 10,
    }

    LOGIN_URL = API_BASE . '/accounts/cilogon/login/'
    LOGIN_REDIRECT_URL = API_BASE . '/admin/'
